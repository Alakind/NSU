import lingo/pegcode/driver;
import math/math;
import string;

ArExpr ::= ArSum, ArMult, ArInt, ArSub, ArDiv, ArInv, ArRat, ArVar;

ArSum(lhs : ArExpr, rhs : ArExpr);
ArMult(lhs : ArExpr, rhs : ArExpr);
ArInt(val : int);
ArSub(lhs : ArExpr, rhs : ArExpr);
ArDiv(lhs : ArExpr, rhs : ArExpr);
ArInv(arg : ArExpr);
ArRat(num : int, denum : int);
ArVar(name : string);

Monome(monome: Tree<string, int>);
Polinome(monomes: Tree<Monome, int>);
RatFunc(num: Polinome, denum: Polinome);

ZERO_DIV = "Divison by zero";
INVALID_INPUT = "Invalid input";

ratFunc2arExpr(func: RatFunc) -> ArExpr {
	ArDiv(polinome2arExpr(func.num), polinome2arExpr(func.denum));
}

polinome2arExpr(polinome: Polinome) -> ArExpr {
	foldTree(polinome.monomes, ArRat(1, 1), \monome, coef, acc -> {
			expr = monome2arExpr(monome);
			mult = ArMult(expr, coef);
			ArSum(acc, mult);
			ArRat(1, 1)
	})
}

makePow(pow: int, expr: ArExpr, var: string) -> ArExpr {
	if (pow == 0) {
		expr;
	} else {
		makePow(pow - 1, ArMult(ArVar(var), expr), var)
	}
}

monome2arExpr(monome: Monome) -> ArExpr {
	foldTree(monome.monome, ArRat(1, 1), \var, pow, acc -> {
		println(var);
		println(pow);

		ArRat(1, 1)
		// makePow(pow, ArInt(0), var);
	});
}

s2ar(str : string) -> ArExpr {
	e_gr = "#include arith.lingo";
	parsic(
		compilePegGrammar(e_gr), 
		str,
		SemanticActions(setTree(defaultPegActions.t, "createArInt", \s -> ArInt(s2i(s[0]))))
	)
}

ar2s(expr : ArExpr) -> Maybe<string> {
	switch (expr : ArExpr) {
		ArInt(val): Some(i2s(val));
		ArSum(lhs, rhs): {
			left = ar2s(lhs);
			right = ar2s(rhs);
			str = ["(", left??left:ZERO_DIV, "+", right??right:ZERO_DIV, ")"];
			Some(strGlue(str, ""));
		}
		ArMult(lhs, rhs): {
			left = ar2s(lhs);
			right = ar2s(rhs);
			str = ["(", left??left:ZERO_DIV, "*", right??right:ZERO_DIV, ")"];
			Some(strGlue(str, ""));
		}
		ArSub(lhs, rhs): {
			left = ar2s(lhs);
			right = ar2s(rhs);
			str = ["(", left??left:ZERO_DIV, "-", right??right:ZERO_DIV, ")"];
			Some(strGlue(str, ""));
		}
		ArDiv(lhs, rhs): {
			left = ar2s(lhs);
			right = ar2s(rhs);
			str = ["(", left??left:ZERO_DIV, "/", right??right:ZERO_DIV, ")"];
			Some(strGlue(str, ""));
		}
		ArInv(value): {
			res = ar2s(value);
			Some(strGlue(["-", res??res:ZERO_DIV], ""));
		}
		ArRat(num, denum): {
			if (denum == 0) {
				None();
			} else if (denum / gcd(num, denum) == 1) {
				Some(i2s(num / gcd(num, denum)));
			} else {
				str = ["(", i2s(num / gcd(num, denum)), "/", i2s(denum / gcd(num, denum)), ")"];
				Some(strGlue(str, ""));
			}
		}
		ArVar(variable): Some(variable);
	}
}

varLookup(variable: string, variables: [Pair<string, ArRat>]) -> ArRat {
	fold(variables, ArRat(0, 0), \acc, cur_pair -> {
		if (firstOfPair(cur_pair) == variable) {
			ArRat(secondOfPair(cur_pair).num, secondOfPair(cur_pair).denum);
		} else {
			acc
		}
	})
}

// #########################################################################

simplify(expr: ArExpr) -> ArExpr {
	switch (expr : ArExpr) {
		ArVar(variable): {
			ArVar(variable)
		}
		ArInt(val): {
			ArRat(val, 1)
		}
		ArSum(lefths, righths): {
			lhs = simplify(lefths);
			rhs = simplify(righths);

			switch(lhs : ArExpr) {
				ArRat(lnum, ldenum): {
					switch(rhs : ArExpr) {
						ArRat(rnum, rdenum): {
							if (lnum == 0) {
								rhs
							} else if (rnum == 0) {
								lhs
							} else {
								ArSum(lhs, rhs)
							}
						}
						default: {
							if (lnum == 0) {
								rhs
							} else {
								ArSum(lhs, rhs)
							}
						}
					}
				}
				default: {
					switch(rhs : ArExpr) {
						ArRat(rnum, rdenum): {
							if (rnum == 0) {
								lhs
							} else {
								ArSum(lhs, rhs)
							}
						}
						default: {
							ArSum(lhs, rhs)
						}
					}
				}
			}
		}
		ArSub(lefths, righths): {
			lhs = simplify(lefths);
			rhs = simplify(righths);

			switch(lhs : ArExpr) {
				ArRat(lnum, ldenum): {
					switch(rhs : ArExpr) {
						ArRat(rnum, rdenum): {
							if (lnum == 0) {
								ArInv(rhs)
							} else if (rnum == 0) {
								lhs
							} else {
								ArSub(lhs, rhs)
							}
						}
						default: {
							if (lnum == 0) {
								ArInv(rhs)
							} else {
								ArSub(lhs, rhs)
							}
						}
					}
				}
				default: {
					switch(rhs : ArExpr) {
						ArRat(rnum, rdenum): {
							if (rnum == 0) {
								lhs
							} else {
								ArSub(lhs, rhs)
							}
						}
						default: {
							ArSub(lhs, rhs)
						}
					}
				}
			}
		}
		ArMult(lefths, righths): {
			lhs = simplify(lefths);
			rhs = simplify(righths);

			switch(lhs : ArExpr) {
				ArRat(lnum, ldenum): {
					switch(rhs : ArExpr) {
						ArRat(rnum, rdenum): {
							if (lnum == 0 || rnum == 0) {
								ArRat(0, 1)
							} else if (lnum == 1 && ldenum == 1) {
								rhs
							} else if (rnum == 1 && rdenum == 1) {
								lhs
							} else {
								ArMult(lhs, rhs)
							}
						}
						
						default: {
							if (lnum == 0) {
								ArRat(0, 1)
							} else {
								ArMult(lhs, rhs)
							}
						}
					}
				}
				default: {
					switch(rhs : ArExpr) {
						ArRat(rnum, rdenum): {
							if (rnum == 0) {
								ArRat(0, 1)
							} else {
								ArMult(lhs, rhs)
							}
						}
						default: {
							ArMult(lhs, rhs)
						}
					}
				}
			}
		}
		ArDiv(lefths, righths): {
			lhs = simplify(lefths);
			rhs = simplify(righths);

			switch(lhs : ArExpr) {
				ArRat(lnum, ldenum): {
					switch(rhs : ArExpr) {
						ArRat(rnum, rdenum): {
							if (lnum == 0) {
								ArRat(0, 1)
							} else {
								ArDiv(lhs, rhs)
							}
						}
						default: {
							ArDiv(lhs, rhs)
						}
					}
				}
				default: {
					ArDiv(lhs, rhs)
				}
			}
		}
		ArInv(income): {
			ArInv(income)
		}
		ArRat(num, denum): {
			gcd = iabs(gcd(num, denum));

			ArRat(num / gcd, denum / gcd)
		}
	}
}

// #########################################################################

ar2ArRat(expr: ArExpr) -> RatFunc {
	switch(expr) {
		ArVar(variable): {
			RatFunc(
				Polinome(makeTree1(Monome(makeTree1(variable, 1)), 1)),
				Polinome(makeTree1(Monome(makeTree()), 1)),
			);
		}
		ArInt(val): {
			RatFunc(
				Polinome(makeTree1(Monome(makeTree()), val)),
				Polinome(makeTree1(Monome(makeTree()), 1)),
			);
		}
		ArSum(lhs, rhs): {
			left = ar2ArRat(lhs);
			right = ar2ArRat(rhs);

			RatFunc(
				sumPolinomes(
					multPolinomes(left.num, right.denum),
					multPolinomes(right.num, left.denum)
				),
				multPolinomes(left.denum, right.denum)
			);
		}
		ArSub(lhs, rhs): {
			left = ar2ArRat(lhs);
			right = invRat(ar2ArRat(rhs));

			RatFunc(
				sumPolinomes(
					multPolinomes(left.num, right.denum),
					multPolinomes(right.num, left.denum)
				),
				multPolinomes(left.denum, right.denum)
			);
		}
		ArMult(lhs, rhs): {
			left = ar2ArRat(lhs);
			right = invRat(ar2ArRat(rhs));

			RatFunc(
				multPolinomes(left.num, right.num),
				multPolinomes(left.denum, right.denum)
			)
		}
		ArDiv(lhs, rhs): {
			left = ar2ArRat(lhs);
			right = invRat(ar2ArRat(rhs));

			RatFunc(
				multPolinomes(left.num, right.denum),
				multPolinomes(left.denum, right.num)
			);
		}
		ArInv(income): {
			in = ar2ArRat(income);

			invRat(in);
		}
		ArRat(num, denum): {
			RatFunc(
				Polinome(makeTree1(Monome(makeTree()), num)),
				Polinome(makeTree1(Monome(makeTree()), denum)),
			);
		}
	}
}

invRat(func: RatFunc) -> RatFunc {
	RatFunc(
        Polinome(mapTree(func.num.monomes, \monome -> -monome)),
        func.denum
    );
}

multPolinomes(left: Polinome, right: Polinome) -> Polinome {
	Polinome(
		foldTree(left.monomes, makeTree(), \left_monome, left_coef, left_acc -> {
			foldTree(right.monomes, left_acc, \right_monome, right_coef, right_acc -> {
				monome = Monome(mergeTreeCustom(left_monome.monome, right_monome.monome, \k, l, r -> l + r));
				res = lookupTree(right_acc, monome);

				res ?? setTree(right_acc, monome, res + right_coef * left_coef) : setTree(right_acc, monome, right_coef * left_coef);
			});
		})
	);
}

sumPolinomes(left: Polinome, right: Polinome) -> Polinome {
	Polinome(mergeTreeCustom(left.monomes, right.monomes, \k, left_coef, right_coef -> right_coef + left_coef));
}

ratFunc2s(func: RatFunc) -> string {
	left = polinome2s(func.num);
	right = polinome2s(func.denum);

	if (right == "") {
		ZERO_DIV;
	} else if (left == "") {
		"0";
	} else if (right == "1") {
		left;
	} else if (right == "-1") {
		func_inv = invRat(func);
		polinome2s(func_inv.num);
	} else {
		concatStrings(["(", left, ")", " / ", "(", right, ")"])
	};
}

polinome2s(polinome: Polinome) -> string {
	foldRTree(polinome.monomes, "", \monomes, coef, res -> {
		if (res == "") {
			if (coef >= 0) {
				monome2s(monomes, coef);
			} else {
				concatStrings(["-", monome2s(monomes, iabs(coef))]);
			}
		} else {
			monome_str = monome2s(monomes, coef);
			if (monome_str != "") {
				if (coef >= 0) {
        			concatStrings([res, " + ", monome2s(monomes, coef)]);
				} else {
					concatStrings([res, " - ", monome2s(monomes, iabs(coef))]);
				}
			} else {
				concatStrings([res, monome2s(monomes, coef)]);
			}
		}
	});
}

monome2s(monome: Monome, coef: int) -> string {
	if (coef == 0) {
		""
	} else if (coef == 1) {
		if (isEmptyTree(monome.monome)) {
			"1";
		} else {
			foldRTree(monome.monome, "", \mon, pow, res -> {
				if (pow == 1) {
					concatStrings([res, mon]);
				} else {
					concatStrings([res, mon, "^", "(", i2s(pow), ")"]);
				}
			});
		}
	} else {
		foldRTree(monome.monome, i2s(coef), \mon, pow, res -> {
            if(pow == 1) {
                concatStrings([res, mon]);
            } else {
                concatStrings([res, mon, "^", "(", i2s(pow), ")"]);
            }
        });
	}
}

main() {
	s = "((((9 * (x * x)) - 4) / ((3 * x) + 2)) - (3 * x))";
    tree = s2ar(s);
	println(ratFunc2s(ar2ArRat(tree)));
	println(simplify(ratFunc2arExpr(ar2ArRat(tree))));
}
